package promptdslcore

import (
	"fmt"
	"strings"
)

func Generateprompthandle(root *PromptNode, pkgName string, eval *final) string {
	// fmt

	// for
	var b strings.Builder
	outputTypeStr := "OutputContext"
	if root.outputspectNodes.IsArray {
		outputTypeStr = "[]OutputContext"
	}

	// 写包名和注释
	b.WriteString("// Code generated by PromptDSL. DO NOT EDIT.\n")
	b.WriteString(fmt.Sprintf("package %s\n\n", pkgName))

	//import
	afterCode := strings.Join(root.AfterCode, "\n")
	fixCode := strings.Join(root.FixCode, "\n")

	allCode := afterCode + "\n" + fixCode

	pkgs := inferImportsFromCode(allCode)

	// 手动保证 "os" 在包列表里
	requiredPkgs := []string{"os", "fmt"}
	for _, req := range requiredPkgs {
		has := false
		for _, pkg := range pkgs {
			if pkg == req {
				has = true
				break
			}
		}
		if !has {
			pkgs = append(pkgs, req)
		}
	}
	importBlock := renderImportSection(pkgs)
	b.WriteString(importBlock)

	// struct
	b.WriteString("type InputContext struct {\n")
	for _, field := range root.InFields {
		b.WriteString(fmt.Sprintf("    %s %s `json:\"%s\"`\n", field.Name, field.Type, field.JsonName))
	}
	b.WriteString("}\n\n")
	b.WriteString("type OutputContext struct {\n")

	for _, field := range root.OutFields {
		fieldName := capitalizeFirst(field.Name)
		b.WriteString(fmt.Sprintf("    %s %s `json:\"%s\"`\n", fieldName, field.Type, field.JsonName))
	}
	b.WriteString("}\n\n")

	b.WriteString("type FinalContext struct {\n")
	b.WriteString("    Input  InputContext\n")
	b.WriteString(fmt.Sprintf("    Output %s\n", outputTypeStr))
	b.WriteString("}\n\n")

	//gensystem
	//写入sys处理逻辑
	b.WriteString(fmt.Sprintf("func Gensys(input InputContext) string {\n"))
	b.WriteString("    var b strings.Builder\n")

	// for _, line := range eval.User {
	// 	b.WriteString(fmt.Sprintf("    %s\n", line)) // 不加 WriteString("...")
	// }
	b.WriteString("    return b.String()\n")
	b.WriteString("\n}\n\n")
	//把dsl_gen里面生成的东西拿过来
	//genuser
	b.WriteString(fmt.Sprintf("func Genuser(input InputContext) string {\n"))
	b.WriteString("    var b strings.Builder\n")

	for _, line := range eval.User {
		b.WriteString(fmt.Sprintf("    %s\n", line)) // 不加 WriteString("...")
	}
	b.WriteString("    return b.String()\n")
	b.WriteString("\n}\n\n")

	if strings.TrimSpace(root.AfterCode[0]) != "" {

		b.WriteString(fmt.Sprintf("func AfterProcess(output %s) %s {\n", outputTypeStr, outputTypeStr))
		b.WriteString(root.AfterCode[0])
		b.WriteString("\n}\n\n")
	}

	// 写入 Fix 函数（如果有）
	if strings.TrimSpace(root.FixCode[0]) != "" {
		b.WriteString(fmt.Sprintf("func FixProcess(response string) (%s ,error){\n", outputTypeStr))
		b.WriteString(root.FixCode[0])
		b.WriteString("\n}\n")
	}

	// 写 主调用 函数
	b.WriteString("\nfunc main() {\n")
	// 入口打印
	b.WriteString("    fmt.Fprintln(os.Stderr, \"[main] 程序启动，等待输入...\")\n")
	// b.WriteString("    fmt.Fprintln(os.Stderr, \"[main] 程序启动，等待输入...\")\n\n")

	// b.WriteString("    inputBytes, err := io.ReadAll(os.Stdin)\n")
	// b.WriteString("    if err != nil {\n")
	// b.WriteString("        fmt.Fprintln(os.Stderr, \"读取输入失败:\", err)\n")
	// b.WriteString("        os.Exit(1)\n")
	// b.WriteString("    }\n\n")

	// b.WriteString("    fmt.Fprintf(os.Stderr, \"[main] 收到输入: %s\\n\", string(inputBytes))\n\n")

	// b.WriteString("    // 输出简单 JSON 测试一下 stdout 是否返回\n")
	// b.WriteString("    fmt.Println(`[{\"result\": \"ok\"}]`)\n")

	b.WriteString("    inputBytes, err := os.ReadFile(\"model_output.json\")\n")
	b.WriteString("    if err != nil {\n")
	b.WriteString("        fmt.Fprintf(os.Stderr, \"读取输入失败: %v\\n\", err)\n")
	b.WriteString("        os.Exit(1)\n")
	b.WriteString("    }\n\n")

	hasFix := strings.TrimSpace(fixCode) != ""
	hasAfter := strings.TrimSpace(afterCode) != ""

	if hasFix {

		b.WriteString("    output,err := FixProcess(string(inputBytes))\n")
		b.WriteString("    if err != nil {\n")
		b.WriteString("        fmt.Fprintf(os.Stderr, \"解析输入 JSON 失败011111: %v\\n\", err)\n")
		b.WriteString("        os.Exit(1)\n")
		b.WriteString("    }\n")
		if hasAfter {
			b.WriteString("    output = AfterProcess(output)\n")
		}

	} else if hasAfter {
		b.WriteString(fmt.Sprintf("    var output %s\n", outputTypeStr))
		b.WriteString("    if err := json.Unmarshal(inputBytes, &output); err != nil {\n")
		b.WriteString("        fmt.Fprintf(os.Stderr, \"解析输入 JSON 失败011111: %v\\n\", err)\n")
		b.WriteString("        os.Exit(1)\n")
		b.WriteString("    }\n")
		b.WriteString("    output = AfterProcess(output)\n")
	} else {
		b.WriteString("    fmt.Println(\"未定义 FixProcess 或 AfterProcess\")\n")
		b.WriteString("    return\n")
	}

	b.WriteString("\n    encoded, err := json.Marshal(output)\n")
	b.WriteString("    if err != nil {\n")
	b.WriteString("        fmt.Fprintf(os.Stderr, \"输出编码失败: %v\\n\", err)\n")
	b.WriteString("        os.Exit(1)\n")
	b.WriteString("}\n")
	b.WriteString("    fmt.Println(string(encoded))\n")
	b.WriteString("}\n")

	return b.String()
}
