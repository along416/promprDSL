package promptdslcore

import (
	"fmt"
	"path/filepath"
	"runtime"
	"strings"

	"github.com/antlr4-go/antlr/v4"
)
var symbolToImport = map[string]string{
	"fmt.":     "fmt",
	"strings.": "strings",
	"math":      "math",
	// ...
}
//eval

// 构建输出规范文本，用于根据字段列表生成 JSON 字符串表示。
func BuildOutputSpecText(fields []FieldDef) string {

	var b strings.Builder
	b.WriteString("{\n")

	for _, f := range fields {
		// 基于类型生成例子
		var example string
		switch f.Type {
		case "string":
			example = "\"\""
		case "int":
			example = "0"
		case "float":
			example = "0.0"
		case "bool":
			example = "false|true"
		default:
			if strings.HasPrefix(f.Type, "[]") {
				elemType := f.Type[2:]
				switch elemType {
				case "string":
					example = "[\"\",...]"
				case "int":
					example = "[0]"
				case "float":
					example = "[0.0]"
				case "bool":
					example = "[false|true]"
				default:
					example = "[]"
				}
			} else {
				example = "{}" // struct or unknown type fallback
			}
		}

		// 拼接一行
		b.WriteString(fmt.Sprintf("%s： %s", f.JsonName, example))

		if len(f.Annotations) > 0 {
			b.WriteString("，")
			b.WriteString(strings.Join(f.Annotations, "，"))
		}
		b.WriteString("\n")
	}

	b.WriteString("}")
	return b.String()
}

func GenerateAfterAndFixGoCode(root *RootNode, pkgName string) string {
	var b strings.Builder

	// 写包名和注释
	b.WriteString("// Code generated by PromptDSL. DO NOT EDIT.\n")
	b.WriteString(fmt.Sprintf("package %s\n\n", pkgName))

	

	//import
	afterCode := strings.Join(root.AfterCode, "\n")
	fixCode := strings.Join(root.FixCode, "\n")

	allCode := afterCode + "\n" + fixCode

	pkgs := inferImportsFromCode(allCode)
	importBlock := renderImportSection(pkgs)
	b.WriteString(importBlock)

	// struct
	b.WriteString("type InputContext struct {\n")
	for _, field := range root.InFields {
		b.WriteString(fmt.Sprintf("    %s %s `json:\"%s\"`\n", field.Name, field.Type, field.JsonName))
	}
	b.WriteString("}\n\n")
	b.WriteString("type OutputContext struct {\n")
	for _, field := range root.OutFields {
		fieldName := capitalizeFirst(field.Name)
		b.WriteString(fmt.Sprintf("    %s %s `json:\"%s\"`\n", fieldName, field.Type, field.JsonName))
	}
	b.WriteString("}\n\n")

	b.WriteString("type FinalContext struct {\n")
	b.WriteString("    Input  InputContext\n")
	b.WriteString("    Output []OutputContext\n") // 注意 Output 是 slice，适配大模型批量返回
	b.WriteString("}\n\n")

	// 写入 After 函数（如果有）
	if strings.TrimSpace(root.AfterCode[0]) != "" {
		b.WriteString("func AfterProcess(output []OutputContext) []OutputContext {\n")
		b.WriteString(root.AfterCode[0])
		b.WriteString("\n}\n\n")
	}

	// 写入 Fix 函数（如果有）
	if strings.TrimSpace(root.FixCode[0]) != "" {
		b.WriteString("func FixProcess(output []OutputContext) []OutputContext {\n")
		b.WriteString(root.FixCode[0])
		b.WriteString("\n}\n")
	}

	return b.String()
}
func getCurrentPackageName() string {
	_, file, _, ok := runtime.Caller(1)
	if !ok {
		return "main"
	}
	// 获取路径中的目录名作为“包名”
	dir := filepath.Base(filepath.Dir(file))
	return dir
}
func extractRawText(ctx antlr.ParserRuleContext, tokens *antlr.CommonTokenStream) []string {
	startIdx := ctx.GetStart().GetTokenIndex()
	stopIdx := ctx.GetStop().GetTokenIndex()

	// 获取完整 token 列表
	allTokens := tokens.GetAllTokens()

	// 切片截取 ctx 范围内的 token
	if startIdx < 0 || stopIdx >= len(allTokens) || startIdx > stopIdx {
		return nil
	}

	var builder strings.Builder
	for _, tok := range allTokens[startIdx : stopIdx+1] {
		builder.WriteString(tok.GetText())
	}
	code := builder.String()
	code = strings.TrimPrefix(code, "<after>")
	code = strings.TrimSuffix(code, "</after>")
	code = strings.TrimPrefix(code, "<fix>")
	code = strings.TrimSuffix(code, "</fix>")
	return []string{code}
}

func capitalizeFirst(s string) string {
	if len(s) == 0 {
		return s
	}
	return strings.ToUpper(s[:1]) + s[1:]
}
func renderImportSection(pkgs []string) string {
	if len(pkgs) == 0 {
		return ""
	}
	var b strings.Builder
	b.WriteString("import (\n")
	for _, pkg := range pkgs {
		b.WriteString(fmt.Sprintf("\t\"%s\"\n", pkg))
	}
	b.WriteString(")\n\n")
	return b.String()
}
func inferImportsFromCode(code string) []string {
	importSet := map[string]struct{}{}

	for prefix, pkg := range symbolToImport {
		if strings.Contains(code, prefix) {
			importSet[pkg] = struct{}{}
		}
	}

	var imports []string
	for pkg := range importSet {
		imports = append(imports, pkg)
	}
	// sort.Strings(imports) // 可选：让 import 有序
	return imports
}