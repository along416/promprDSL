from typing import Dict, List
import re

def split_solution_steps(question: str) -> Dict[str, List[str]]:
    """
    拆分解题步骤为多个有逻辑完整性的步骤。

    参数:
        question (str): 题干 + 解答内容

    返回:
        Dict[str, List[str]]: 拆分后的解题步骤 JSON，如 {"解题步骤": ["步骤1", "步骤2", ...]}
    """
    if not question or len(question.strip()) < 20:
        return {"解题步骤": []}  # 内容太短，跳过

    # 判断题目内容关键词
    has_set = bool(re.search(r"[集合A|B|∩|∪|∈]", question))
    has_inequality = bool(re.search(r"[不等式|≤|≥|<|>]", question))
    has_function = "函数" in question

    # 系统设定
    system = [{
        "role": "system",
        "content": "你是一个擅长拆分解题步骤的数学老师，当前任务是将解题步骤进行合理拆分"
    }]

    # 动态补充的知识点提示
    extra_hint = []
    if has_set:
        extra_hint.append("集合运算相关知识点如交集、并集、子集等")
    if has_inequality:
        extra_hint.append("解不等式的变形与求解方法")
    if has_function:
        extra_hint.append("函数定义域、值域、单调性等分析")

    knowledge_tip = ""
    if extra_hint:
        knowledge_tip = f"\n特别提醒：本题可能涉及 {'，'.join(extra_hint)}，请根据步骤合理提取对应知识点。\n"

    # 用户 prompt
    prompt = [{
        
        "role": "user",
        "content": f"""请根据以下输入题目及其解答内容，将完整的解答过程拆分为多个“短链”，每个“短链”包含以下三个要素：

        条件：解题中使用的前提（可以是题设，也可以是上一步的结果）；
        知识点：该步骤使用的知识点（例如：解不等式、集合交集、函数求值等）；
        结果：基于条件和知识点推理出的结论或结果。

        请将输出内容以 JSON list 格式返回，格式如下：

        [
        {{
            "条件": ["第一步所用条件1", "第一步所用条件2"],
            "知识点": "这一步使用的知识点",
            "过程及结果": "这一步推出的过程和结果"
        }},
        {{
            "条件": ["第二步所用条件"],
            "知识点": "这一步使用的知识点",
            "过程及结果": "这一步推出的过程和结果"
        }}
        ]

        注意：
        1. 每一步的条件必须完整、明确，不能模糊；
        2. 知识点应尽量具体、准确，体现数学推理方法；
        3. 结论应清晰表达出推导结果；
        4. 上一步结果可作为下一步条件。

        {knowledge_tip}

        以下是输入内容，请据此拆解：
        {question}
        """
    }]

    # 模型调用
    response = qwen_gen_think(system, prompt, model_name="qwq-plus")
    return extract_json(response[-1]["content"])