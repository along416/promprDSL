package promptdslcore

import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"regexp"
	"runtime"

	// "path/filepath"
	"promptdslcore/parser"
	"strconv"

	// "runtime"

	"strings"

	"github.com/antlr4-go/antlr/v4"
)

// eval
// log
func InitLog(logPath string) {
	logFile, err := os.OpenFile(logPath, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)
	if err != nil {
		log.Fatalf("无法打开日志文件: %v", err)
	}
	log.SetOutput(logFile)
	log.SetFlags(log.Ldate | log.Ltime | log.Lshortfile)
}

// 构建输出规范文本，用于根据字段列表生成 JSON 字符串表示。
func BuildOutputSpecLines(fields []FieldDef, asArray bool) []string {
	var lines []string
	if asArray {
		lines = append(lines, "```json")
		lines = append(lines, "[")
		lines = append(lines, "  {")
	} else {
		lines = append(lines, "```json")
		lines = append(lines, "{")
	}

	for i, f := range fields {
		var example string
		switch f.Type {
		case "string":
			example = "\"\""
		case "int":
			example = "0"
		case "float":
			example = "0.0"
		case "bool":
			example = "false"
		default:
			if strings.HasPrefix(f.Type, "[]") {
				elemType := f.Type[2:]
				switch elemType {
				case "string":
					example = "[\"\"]"
				case "int":
					example = "[0]"
				case "float":
					example = "[0.0]"
				case "bool":
					example = "[false]"
				default:
					example = "[]"
				}
			} else {
				example = "{}"
			}
		}

		// 添加字段及注释
		line := fmt.Sprintf("    \"%s\": %s  // %s", f.JsonName, example, strings.Join(f.Annotations, ","))
		if i < len(fields)-1 {
			line += ","
		}
		lines = append(lines, line)
	}

	if asArray {
		lines = append(lines, "  }")
		lines = append(lines, "]")
	} else {
		lines = append(lines, "}")
	}
	lines = append(lines, "```")

	return lines
}

func GenerateAfterAndFixGoCode(root *PromptNode, pkgName string) string {
	var b strings.Builder
	//传个参进来
	outputTypeStr := "OutputContext"
	if root.outputspectNodes.IsArray {
		outputTypeStr = "[]OutputContext"
	}

	// 写包名和注释
	b.WriteString("// Code generated by PromptDSL. DO NOT EDIT.\n")
	b.WriteString(fmt.Sprintf("package %s\n\n", pkgName))

	//import
	afterCode := strings.Join(root.AfterCode, "\n")
	fixCode := strings.Join(root.FixCode, "\n")

	allCode := afterCode + "\n" + fixCode

	pkgs := inferImportsFromCode(allCode)

	// 手动保证 "os" 在包列表里
	requiredPkgs := []string{"os", "fmt"}
	for _, req := range requiredPkgs {
		has := false
		for _, pkg := range pkgs {
			if pkg == req {
				has = true
				break
			}
		}
		if !has {
			pkgs = append(pkgs, req)
		}
	}

	importBlock := renderImportSection(pkgs)
	b.WriteString(importBlock)

	// struct
	b.WriteString("type InputContext struct {\n")
	for _, field := range root.InFields {
		b.WriteString(fmt.Sprintf("    %s %s `json:\"%s\"`\n", field.Name, field.Type, field.JsonName))
	}
	b.WriteString("}\n\n")
	b.WriteString("type OutputContext struct {\n")
	for _, field := range root.OutFields {
		fieldName := capitalizeFirst(field.Name)
		b.WriteString(fmt.Sprintf("    %s %s `json:\"%s\"`\n", fieldName, field.Type, field.JsonName))
	}
	b.WriteString("}\n\n")

	b.WriteString("type FinalContext struct {\n")
	b.WriteString("    Input  InputContext\n")
	b.WriteString(fmt.Sprintf("    Output %s\n", outputTypeStr))
	b.WriteString("}\n\n")

	// 写入 After 函数（如果有）

	if strings.TrimSpace(root.AfterCode[0]) != "" {
		b.WriteString(fmt.Sprintf("func AfterProcess(output %s) %s {\n", outputTypeStr, outputTypeStr))
		b.WriteString(root.AfterCode[0])
		b.WriteString("\n}\n\n")
	}

	// 写入 Fix 函数（如果有）
	if strings.TrimSpace(root.FixCode[0]) != "" {
		b.WriteString(fmt.Sprintf("func FixProcess(response string) (%s ,error){\n", outputTypeStr))
		b.WriteString(root.FixCode[0])
		b.WriteString("\n}\n")
	}

	// 写 main 函数
	b.WriteString("\nfunc main() {\n")
	// 入口打印
	b.WriteString("    fmt.Fprintln(os.Stderr, \"[main] 程序启动，等待输入...\")\n")
	b.WriteString("    inputBytes, err := os.ReadFile(\"model_output.json\")\n")
	b.WriteString("    if err != nil {\n")
	b.WriteString("        fmt.Fprintf(os.Stderr, \"读取输入失败: %v\\n\", err)\n")
	b.WriteString("        os.Exit(1)\n")
	b.WriteString("    }\n\n")

	hasFix := strings.TrimSpace(fixCode) != ""
	hasAfter := strings.TrimSpace(afterCode) != ""

	if hasFix {

		b.WriteString("    output,err := FixProcess(string(inputBytes))\n")
		b.WriteString("    if err != nil {\n")
		b.WriteString("        fmt.Fprintf(os.Stderr, \"解析输入 JSON 失败011111: %v\\n\", err)\n")
		b.WriteString("        os.Exit(1)\n")
		b.WriteString("    }\n")
		if hasAfter {
			b.WriteString("    output = AfterProcess(output)\n")
		}

	} else if hasAfter {
		b.WriteString(fmt.Sprintf("    var output %s\n", outputTypeStr))
		b.WriteString("    if err := json.Unmarshal(inputBytes, &output); err != nil {\n")
		b.WriteString("        fmt.Fprintf(os.Stderr, \"解析输入 JSON 失败011111: %v\\n\", err)\n")
		b.WriteString("        os.Exit(1)\n")
		b.WriteString("    }\n")
		b.WriteString("    output = AfterProcess(output)\n")
	} else {
		b.WriteString("    fmt.Println(\"未定义 FixProcess 或 AfterProcess\")\n")
		b.WriteString("    return\n")
	}

	b.WriteString("\n    encoded, err := json.Marshal(output)\n")
	b.WriteString("    if err != nil {\n")
	b.WriteString("        fmt.Fprintf(os.Stderr, \"输出编码失败: %v\\n\", err)\n")
	b.WriteString("        os.Exit(1)\n")
	b.WriteString("}\n")
	b.WriteString("    fmt.Println(string(encoded))\n")
	b.WriteString("}\n")

	return b.String()
}

func getCurrentPackageName() string {
	_, file, _, ok := runtime.Caller(1)
	if !ok {
		return "main"
	}
	// 获取路径中的目录名作为“包名”
	dir := filepath.Base(filepath.Dir(file))
	return dir
}
func extractRawText(ctx antlr.ParserRuleContext, tokens *antlr.CommonTokenStream) []string {
	startIdx := ctx.GetStart().GetTokenIndex()
	stopIdx := ctx.GetStop().GetTokenIndex()

	// 获取完整 token 列表
	allTokens := tokens.GetAllTokens()

	// 切片截取 ctx 范围内的 token
	if startIdx < 0 || stopIdx >= len(allTokens) || startIdx > stopIdx {
		return nil
	}

	var builder strings.Builder
	for _, tok := range allTokens[startIdx : stopIdx+1] {
		builder.WriteString(tok.GetText())
	}
	code := builder.String()
	rePrefix := regexp.MustCompile(`(?i)^\s*(after|fix)\s*{`)
	code = rePrefix.ReplaceAllString(code, "")
	code = strings.TrimSuffix(code, "}")
	return []string{code}
}

func capitalizeFirst(s string) string {
	if len(s) == 0 {
		return s
	}
	return strings.ToUpper(s[:1]) + s[1:]
}
func renderImportSection(pkgs []string) string {
	if len(pkgs) == 0 {
		return ""
	}
	var b strings.Builder
	b.WriteString("import (\n")
	for _, pkg := range pkgs {
		b.WriteString(fmt.Sprintf("\t\"%s\"\n", pkg))
	}
	b.WriteString(")\n\n")
	return b.String()
}
func inferImportsFromCode(code string) []string {
	importSet := map[string]struct{}{}

	for prefix, pkg := range symbolToImport {
		if strings.Contains(code, prefix) {
			importSet[pkg] = struct{}{}
		}
	}

	var imports []string
	for pkg := range importSet {
		imports = append(imports, pkg)
	}
	// sort.Strings(imports) // 可选：让 import 有序
	return imports
}
func renderImportSectionWithAlias(goimports []goimport, pkgs []string) string {
    var b strings.Builder
    b.WriteString("import (\n")
    
    // 先把带别名的 goimports 写进去
    for _, imp := range goimports {
        if imp.Alias != "" {
            b.WriteString(fmt.Sprintf("\t%s \"%s\"\n", imp.Alias, imp.Path))
        } else {
            b.WriteString(fmt.Sprintf("\t\"%s\"\n", imp.Path))
        }
    }

    // 把纯路径 pkgs 里没有在 goimports 里出现的路径补上（无别名）
    exist := map[string]bool{}
    for _, imp := range goimports {
        exist[imp.Path] = true
    }
    for _, pkg := range pkgs {
        if !exist[pkg] {
            b.WriteString(fmt.Sprintf("\t\"%s\"\n", pkg))
        }
    }

    b.WriteString(")\n\n")
    return b.String()
}
func extractFieldDef(field parser.IFieldDefContext, defaultAnnoMap map[string][]string) FieldDef {
	name := field.ID().GetText()
	typ := field.Type_().GetText()
	jsonName := name
	var annotations []string
	var subFields []FieldDef

	// typeCtx := field.Type_()

	// // 判断是否为 struct 类型
	// if structType := typeCtx.GetChild(0); structType != nil {
	// 	if structKeyword, ok := structType.(antlr.TerminalNode); ok && structKeyword.GetText() == "struct" {
	// 		// 手动访问 struct 的字段定义
	// 		// 遍历 Type_() 的子节点，找出 fieldDef
	// 		for i := 0; i < typeCtx.GetChildCount(); i++ {
	// 			child := typeCtx.GetChild(i)
	// 			if fdCtx, ok := child.(*parser.FieldDefContext); ok {
	// 				subFields = append(subFields, extractFieldDef(fdCtx, defaultAnnoMap))
	// 			}
	// 		}
	// 	}
	// }

	// 注解处理（不变）
	for _, ann := range field.AllAnnotation() {
		annName := ann.ID().GetText()
		if ann.AnnotationArgs() != nil {
			for _, v := range ann.AnnotationArgs().AllAnnotationValue() {
				var val string
				if s := v.STRING(); s != nil {
					raw := s.GetText()
					unquoted, err := strconv.Unquote(raw)
					if err != nil {
						unquoted = raw
					}
					val = unquoted
				} else if arr := v.ArrayLiteral(); arr != nil {
					var parts []string
					for _, s := range arr.AllSTRING() {
						raw := s.GetText()
						unquoted, err := strconv.Unquote(raw)
						if err != nil {
							unquoted = raw
						}
						parts = append(parts, unquoted)
					}
					val = strings.Join(parts, ",")
				}
				if annName == "jsonname" {
					jsonName = val
				} else {
					annotations = append(annotations, val)
				}
			}
		}
		if defVals, ok := defaultAnnoMap[annName]; ok {
			annotations = append(annotations, defVals...)
		}
	}

	return FieldDef{
		Name:        name,
		Type:        typ,
		JsonName:    jsonName,
		Annotations: annotations,
		SubFields:   subFields,
	}
}

type Range struct {
	start int
	end   int
}

// Function to extract code blocks from the token stream
func extractCodeBlocks(tokens *antlr.CommonTokenStream, typ string) Range {

	// Get all tokens
	allTokens := tokens.GetAllTokens()

	ret := Range{-1, -1}

	t := parser.PromptDSLLexerFIX
	if typ == "after" {
		t = parser.PromptDSLLexerAFTER
	}
	fmt.Println("t:", t)
	// Track brace nesting level
	braceLevel := 0

	for i, token := range allTokens {
		typel := token.GetTokenType()
		fmt.Println("typel:", typel)
		if token.GetTokenType() == t {
			fmt.Println("😮")
			ret.start = i
			braceLevel = 0
			// Find the opening brace
			for j := i + 1; j < len(allTokens); j++ {
				if allTokens[j].GetTokenType() == parser.PromptDSLParserLBRACE {
					// Find the matching closing brace
					for k := j + 1; k < len(allTokens); k++ {
						if allTokens[k].GetTokenType() == parser.PromptDSLParserLBRACE {
							braceLevel++
						} else if allTokens[k].GetTokenType() == parser.PromptDSLParserRBRACE {
							if braceLevel == 0 {
								ret.end = k
								break
							}
							braceLevel--
						}
					}
					break
				}
			}
		}
	}

	return ret
}
func slej() {
	for i := 0; i < 10; i++ {
		fmt.Println(i)
	}
}

// 调用 go get 安装额外的依赖
func installGoImports(goimports []goimport, workDir string) error {
	for _, pkg := range goimports {
		// 标准库如 "fmt"、"os" 不需要 go get
		if isStandardPackage(pkg.Path) {
			continue
		}

		cmd := exec.Command("go", "get", pkg.Path)
		cmd.Dir = workDir
		out, err := cmd.CombinedOutput()
		if err != nil {
			return fmt.Errorf("failed to go get %s: %v\nOutput: %s", pkg, err, string(out))
		}
	}
	return nil
}

// 简单判断是不是标准库
func isStandardPackage(pkg string) bool {
	stdPkgs := map[string]bool{
		"fmt": true, "os": true, "io": true, "strings": true, "time": true, "bytes": true,
	}
	return stdPkgs[pkg]
}
